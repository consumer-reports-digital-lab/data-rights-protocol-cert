:PROPERTIES:
:ID:       20211116T134053.585822
:END:
#+title: DRP PIP Conformance Test Suite
#+filetags: :Project:Work:ConsumerReports:Development:Writing:
#+ARCOLOGY_KEY: doc/drp/conformance
#+AUTHOR: Consumer Reports Digital Lab

This is the working space for the [[http://datarightsprotocol.org/][Data Rights Protocol]] conformance test suite. Right now I'm developing it as an [[https://orgmode.org/worg/org-contrib/babel/intro.html][Literate Programming]] document which feeds short snippets of code in to a BASH shell behind the scenes.

This work product is licensed under the [[file:./LICENSE.md][Apache Software License v2]] and owned by the [[https://digital-lab.consumerreports.org/][Consumer Reports Digital Lab]] until transferred in to a [[http://datarightsprotocol.org/][DRP]] governance organization.

* Introduction and Set Up

- This assumes a UNIX-like environment. Developed on linux, mostly assumed to be compatible with macOS and [[https://docs.microsoft.com/en-us/windows/wsl/about][WSL2]], I will work with folks to debug issues.
- This assumes you've cloned the [[https://github.com/consumer-reports-digital-lab/data-rights-protocol/][data-rights-protocol]] specification repository and ran =git submodule init= inside of it.
- This assumes you're working in a terminal which has been =cd cert='d from inside of the specification git checkout.
- Follow the Introduction and Setup of the [[file:conformance-tools.org][Tools for the DRP Conformance Test Suite]] document and ensure you can enter a =poetry shell=.
- Open *three terminals*, make sure they're all inside of =poetry shell=.
  - inside the first run =swagger= to start the Swagger API viewer on [[http://localhost:8001/swagger]].
  - inside the second run =statusserver= to start the testing Authorized Agent's Status Callback Server on [[http://localhost:8000]]
  - the third terminal will be used to submit the data rights requests embedded in this document.
- All of the shell script snippets included in this document can be copied in to a terminal, and any expected output is included below the commands, though rendering in GitHub or similar platforms may be confusing. See [[id:20220305T172433.835616][Appendix 1]] for background on the document format, why this isn't an HTML file.

* Test Plan
:PROPERTIES:
:ID:       20220209T171652.987733
:END:
:LOGBOOK:
CLOCK: [2021-12-29 Wed 11:20]--[2021-12-29 Wed 12:50] =>  1:30
:END:

#+PROPERTY: header-args:shell :session *drp-conformance* :results drawer

This thing uses bash, curl, jq, and a bit of python to run conformance validations.

Remember to be in a =poetry shell=, remember to run =poetry install=

#+begin_src shell
poetry install
poetry shell
#+end_src

#+results:
:results:
Spawning shell within /home/rrix/.cache/pypoetry/virtualenvs/datarightsprotocol-SSQrMXUl-py3.9
. /home/rrix/.cache/pypoetry/virtualenvs/datarightsprotocol-SSQrMXUl-py3.9/bin/activate
echo 'org_babel_sh_eoe'
(datarightsprotocol-SSQrMXUl-py3.9)
:end:

These are variables you will want to change when you copy this in to the shell:

#+begin_src shell :results none -r
export DRP_TEST_CACHE=/tmp/drp-test/ # (ref:1)
export JWT_SECRET=my_jwts_are_secure # (ref:2)
export BUSINESS_DOMAIN=example.com   # (ref:3)
#+end_src

The test suite will store response data and other "interstitial" data in the location specified in [[(1)]], this should be Good Enough on POSIX systems. The secret in [[(2)]] is used to sign the JWTs when =genjwts= is invoked. [[(3)]] is used in the Data Rights Discovery Endpoint tests.

** Data Rights Discovery Endpoint

Validating behavior of [[https://github.com/consumer-reports-digital-lab/data-rights-protocol#201-get-well-knowndata-rightsjson-data-rights-discovery-endpoint][Section 2.01]] of spec.

*** Covered Business's domain SHOULD have a =/.well-known/data-rights.json=

This =BUSINESS_DOMAIN= in [[(1)]] variable is used only in the Discovery Endpoint tests.

The intent of this test is to ensure that the PIPs which provide a =data-rights.json= well-known resource for their customers is providing one which exposes the URI.

[XXX] strike this? - For a general PIP API validation which is not fronting a "real" Covered Business these tests can probably be omitted. full flow versus "partial/point to point"

#+begin_src shell
curl -s $BUSINESS_DOMAIN/.well-known/data-rights.json \
     -o $DRP_TEST_CACHE/data-rights.json \
  || echo "NO GET: data-rights.json"

export DISCOVERY_FOUND=$(test -f $DRP_TEST_CACHE/data-rights.json)
export DISCOVERY_FILE=$DRP_TEST_CACHE/data-rights.json
#+end_src

*** Discovery Endpoint MUST Be Valid JSON

#+begin_src shell
jq . $DISCOVERY_FILE
#+end_src

#+results:
:results:
{
  "version": "0.4",
  "api_base": "https://example.com/data-rights",
  "actions": [
    "sale:opt-out",
    "sale:opt-in",
    "access",
    "deletion"
  ],
  "user_relationships": []
}
:end:

*** Discovery Endpoint MUST contain a version field

This Conformance Suite runs against version 0.4 of the protocol:

#+begin_src shell
[[ "$(jq -r .version $DISCOVERY_FILE)" = "0.4" ]] \
  || echo "NO VERSION: 0.4"
#+end_src

#+results:
:results:
:end:

*** Discovery Endpoint MUST provide an API base

#+begin_src shell
[[ -n "$(jq -r .api_base $DISCOVERY_FILE)" ]] \
  || echo "NO API_BASE"
export API_BASE=$(jq -r .api_base $DISCOVERY_FILE)
#+end_src

#+results:
:results:

:end:

*** Discovery Endpoint MUST provide a list of actions

#+begin_src shell
[[ ! "$(jq ".actions|length" $DISCOVERY_FILE)" = "0" ]] \
  || echo "NO ACTIONS"
export ACTIONS=$(jq -r ".actions|@sh" $DISCOVERY_FILE | tr -d \')
echo $ACTIONS
#+end_src

#+results:
:results:


sale:opt-out sale:opt-in access deletion
:end:

**** NEXT validate that these are all defined under [[https://github.com/consumer-reports-digital-lab/data-rights-protocol#301-supported-rights-actions][Supported Rights Actions]].

**** NEXT validate that these are all matching regexp =[0-9a-z:\-_]=

This isn't in the spec but it should be...

*** Discovery endpoint MAY contain a =user_relationships= hint set

#+begin_src shell
[[ ! "$(jq ".user_relationships|length" $DISCOVERY_FILE)" = "0" ]] \
  || echo "NO USER_RELATIONSHIPS"
#+end_src

#+results:
:results:

NO USER_RELATIONSHIPS
:end:

** NEXT OIDC flows

Most of the "is this valid OIDC?" will come through the [[https://openid.net/certification/][OpenID conformance suite]]. What we need is a thing that can get a JWT signed by the Covered Business's =IDp=.

*** NEXT OIDC flow is under-specified, and we need to come up with a roadmap to onboard

*** Discovery Endpoint references OIDC AS

... auto-discovery of the AS and query it for ID tokens

*** OIDC Flow generates a JWT

Doing this in the shell is probably infeasible... little python client with a chromium embedded in it to do the full OIDC flow?

it'll be needed for assembling a DRR for OIDC-supporting CBs...

** Data Rights Requests
:PROPERTIES:
:ID:       20220110T161657.246138
:END:

*** Submitting Data Rights Requests using the [[file:conformance-tools.org][Tools for the DRP Conformance Test Suite]]

- Requests are generated with the =genreqs= tool and optionally with =genjwts= to modify the bundled JWT.
- Requests are submitted with the included =swagger= server available by running =swagger= inside your poetry shell.
- Each test case will include a command to generate the request, and optionally you'll be able to modify it or the JWT token generation to match your needs.

Most of the sections below consist of a *Recipe* and a table of *Behaviors* to test. Each behavior will be validated by running the recipe, performing a full Data Rights Request which is expected to end in a certain state.

The results should be recorded in your tracking tables.

**** Test Cases

These commands generate Data Rights Requests suitable to be fed in to the swagger tool to run through the Test Matrix to validate API behaviors. The [[file:conformance-tools.org][test tools' documentation]] describe how these commands' invocations can be modified to change factors of the JWTs and Request objects to suit your needs.

***** TC1: =reqs/donotsell.json= The PIP can accept a simple do not sell request

[[file:reqs/donotsell.json][This]] is a simple CCPA Do Not Sell request with a dummy, "unverified" identity [[file:jwts/simple.json][token]]. These types of requests are generally considered to have lower identity verification requirements [XXX].

#+begin_src shell
genjwts -t jwts/simple.json | genreqs -t reqs/donotsell.json 
#+end_src

***** TC2: =jwts/verified.json= The PIP can accept "verified" credentials

This test case validates that the PIP can accept a JWT token which has claims "marked" as verified. ([[id:20220315T190621.777696][But what is "verified" what is meant by "marked"?]])

#+begin_src shell
genjwts -t jwts/verified.json | genreqs -t reqs/donotsell.json
#+end_src

***** TC3: =reqs/deletion.json= The PIP can accept deletion requests

This will send a CCPA Deletion request with verified credentials attached.

#+begin_src shell
genjwts -t jwts/verified.json | genreqs -t reqs/deletion.json
#+end_src

***** TC4: =reqs/access.json= broad access request without any specific scope

#+begin_src shell
genjwts -t jwts/verified.json | genreqs -t reqs/access.json
#+end_src

*** Testing Valid Request flows

These requests should all complete in an affirmative end-state to validate the most basic behavior of the PIP.

**** Recipe

For each *Behavior* above:
- Generate the request from the referenced *Test Case*, and submit it in the Swagger tool.
  - Specified *Overrides* should be added as arguments to either of the =genjwts= or =genreqs= commands.
- Observe:
  - A 200 http status response
  - The response body is an [[https://github.com/consumer-reports-digital-lab/data-rights-protocol#303-schema-status-of-a-data-subject-exercise-request][Exercise Status]] in =open= status.
- record the request ID in to the tracking sheet
- Move the request from =open= to =in_progress= to =fulfilled=

**** Behaviors

| Behavior                                                        | Test Case | Overrides                       |
|-----------------------------------------------------------------+-----------+---------------------------------|
| The PIP can accept a simple do not sell request                 | TC1       | ❌                              |
| The PIP can accept a request with verified credentials          | TC2       | ❌                              |
| The PIP can accept a simple deletion request                    | TC3       | ❌                              |
| The PIP can accept a deletion request with verified credentials | TC3       | jwt: =-v email=                 |
| The PIP can accept a deletion request with verified credentials | TC3       | jwt: =-v phone_number -v email= |
| ...                                                             |           |                                 |

*** NEXT Agent Revocation

test cases:
- revoke immediately
- revoke in need_user_verification stage
- revoke while being processed =in_progress= by CB backend
  
*** NEXT Status Callback validation
*** NEXT Access Requests
*** INPROGRESS Test for all Final States
:LOGBOOK:
- State "INPROGRESS" from "NEXT"       [2022-03-15 Tue 20:19]
:END:

**** Recipe
**** Behaviors

| Behavior                                                                 | Test Case   | Overrides        |
|--------------------------------------------------------------------------+-------------+------------------|
| Expect =claim_not_covered= for GDPR request for US phone number identity | TC3         | =-o regime=gdpr= |
| Expect =too_many_requests= after submitting repeated access requests     | TC4         |                  |
| Valid-but-garbage token should end in =no_match=                         | TC1 TC3 TC4 |                  |
| ...                                                                      |             |                  |

*** NEXT Need User Verification testing

ughghghghgh

This will use a web browser, i guess...? This is where designing these test cases is going to suck the most.

The redirect URL is another thing for the little Heroku app? it's a "nice to have", mostly, though.

- Load =user_verification_url= in browser with some URL parameters attached
  - =request_id= associated with the test case
  - =identity= param w/ the JWT associated with the test case
  - =redirect_to= must be set to "something", not sure what...
    
* Appendices

** 1: But what is this org-mode document, why is this not a Markdown or HTML file?
:PROPERTIES:
:ID:       20220305T172433.835616
:END:

The author of these documents thinks and develops software using a set of tools called [[https://www.gnu.org/software/emacs/][Emacs]] [[https://orgmode.org][Org Mode]]. It's an outlining and project planning tool with everything and the kitchen sink thrown in. When fully embraced, Emacs is a text and data editor which can be customized and automated to an incredible degree, and org-mode contains features and widely-used extensions which provide a similar level of meta-programming ability to documentation itself. It's also a quite convenient markup format to express things with more metadata and semantic structure than Markdown is capable of providing.

For all intents and purposes, however, this document should be usable in an HTML or PDF format as a static reference, and that is the intended deliverable format of it.

These documents use features that are basically built in, and an installation of anything newer than GNU Emacs 28 is probably going to work with minimal fussiness.

#+begin_src shell
emacs -l ob-shell pip-conformance-tests.org --eval '(display-buffer (get-buffer-create "*drp-conformance*"))'=
#+end_src

If you execute this command and a GUI appears with this document, and an empty pane called =*drp-conformance*= at the bottom, then you can proceed to execute the commands *inside the document* by clicking in to the source blocks and pressing =Control-c= twice. The output will appear in the bottom pane, and the output will also be stored in the document.

While it's largely unreasonable to expect everyone to use a particular text editor, especially one with such anachronistic tendencies, it's perhaps interesting to think of this document itself as the first version of the DRP test-suite automation.


** 2: But what is "verified" what is meant by "marked"?
:PROPERTIES:
:ID:       20220315T190621.777696
:END:

The claims in the identity tokens are basically based on [[https://schema.org/Person][schema.org/Person]] attributes, but specified in *OIDC Core 1.0*, [[https://openid.net/specs/openid-connect-core-1_0.html#rfc.section.5.1][Section 5.1]] (Standard Claims). Consider =phone_number= and =phone_number_verified=:

#+begin_quote
True if the End-User's phone number has been verified; otherwise false. When this Claim Value is true, this means that the OP took affirmative steps to ensure that this phone number was controlled by the End-User at the time the verification was performed. The means by which a phone number is verified is context-specific, and dependent upon the trust framework or contractual agreements within which the parties are operating. When true, the phone_number Claim MUST be in E.164 format and any extensions MUST be represented in RFC 3966 format. 
#+end_quote

And thus spoke, the question is our "what is our trust framework or contractual agreements?". This is work for the [[file:../governance.md][governance documentation]] to cover.
